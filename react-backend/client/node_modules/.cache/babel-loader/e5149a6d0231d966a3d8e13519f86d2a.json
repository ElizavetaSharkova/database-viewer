{"ast":null,"code":"\"use strict\";\n/**\n * This is apparently a bit like a Jquery deferred, hence the name\n */\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\elizaveta.sharkova\\\\Learning\\\\React\\\\First\\\\database-viewer\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\elizaveta.sharkova\\\\Learning\\\\React\\\\First\\\\database-viewer\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar Deferred =\n/*#__PURE__*/\nfunction () {\n  function Deferred(Promise) {\n    var _this = this;\n\n    _classCallCheck(this, Deferred);\n\n    this._state = Deferred.PENDING;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n    });\n  }\n\n  _createClass(Deferred, [{\n    key: \"reject\",\n    value: function reject(reason) {\n      if (this._state !== Deferred.PENDING) {\n        return;\n      }\n\n      this._state = Deferred.REJECTED;\n\n      this._reject(reason);\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(value) {\n      if (this._state !== Deferred.PENDING) {\n        return;\n      }\n\n      this._state = Deferred.FULFILLED;\n\n      this._resolve(value);\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._state;\n    }\n  }, {\n    key: \"promise\",\n    get: function get() {\n      return this._promise;\n    }\n  }]);\n\n  return Deferred;\n}(); // TODO: should these really live here? or be a seperate 'state' enum\n\n\nDeferred.PENDING = \"PENDING\";\nDeferred.FULFILLED = \"FULFILLED\";\nDeferred.REJECTED = \"REJECTED\";\nmodule.exports = Deferred;","map":null,"metadata":{},"sourceType":"script"}