{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  id: 0xF3,\n  type: 'TVPTYPE',\n  name: 'TVP',\n  declaration: function declaration(parameter) {\n    return parameter.value.name + ' readonly';\n  },\n  writeTypeInfo: function writeTypeInfo(buffer, parameter) {\n    var ref = void 0,\n        ref1 = void 0,\n        ref2 = void 0,\n        ref3 = void 0;\n    buffer.writeUInt8(this.id);\n    buffer.writeBVarchar('');\n    buffer.writeBVarchar((ref = (ref1 = parameter.value) != null ? ref1.schema : undefined) != null ? ref : '');\n    buffer.writeBVarchar((ref2 = (ref3 = parameter.value) != null ? ref3.name : undefined) != null ? ref2 : '');\n  },\n  writeParameterData: function writeParameterData(buffer, parameter, options) {\n    if (parameter.value == null) {\n      buffer.writeUInt16LE(0xFFFF);\n      buffer.writeUInt8(0x00);\n      buffer.writeUInt8(0x00);\n      return;\n    }\n\n    buffer.writeUInt16LE(parameter.value.columns.length);\n    var ref = parameter.value.columns;\n\n    for (var i = 0, len = ref.length; i < len; i++) {\n      var column = ref[i];\n      buffer.writeUInt32LE(0x00000000);\n      buffer.writeUInt16LE(0x0000);\n      column.type.writeTypeInfo(buffer, column);\n      buffer.writeBVarchar('');\n    }\n\n    buffer.writeUInt8(0x00);\n    var ref1 = parameter.value.rows;\n\n    for (var j = 0, len1 = ref1.length; j < len1; j++) {\n      var row = ref1[j];\n      buffer.writeUInt8(0x01);\n\n      for (var k = 0, len2 = row.length; k < len2; k++) {\n        var value = row[k];\n        var param = {\n          value: value,\n          length: parameter.value.columns[k].length,\n          scale: parameter.value.columns[k].scale,\n          precision: parameter.value.columns[k].precision\n        };\n        parameter.value.columns[k].type.writeParameterData(buffer, param, options);\n      }\n    }\n\n    buffer.writeUInt8(0x00);\n  },\n  validate: function validate(value) {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'object') {\n      return new TypeError('Invalid table.');\n    }\n\n    if (!Array.isArray(value.columns)) {\n      return new TypeError('Invalid table.');\n    }\n\n    if (!Array.isArray(value.rows)) {\n      return new TypeError('Invalid table.');\n    }\n\n    return value;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}