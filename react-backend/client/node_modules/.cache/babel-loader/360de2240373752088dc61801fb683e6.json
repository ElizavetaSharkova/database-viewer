{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\elizaveta.sharkova\\\\Learning\\\\React\\\\First\\\\database-viewer\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\elizaveta.sharkova\\\\Learning\\\\React\\\\First\\\\database-viewer\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\elizaveta.sharkova\\\\Learning\\\\React\\\\First\\\\database-viewer\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\elizaveta.sharkova\\\\Learning\\\\React\\\\First\\\\database-viewer\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"C:\\\\Users\\\\elizaveta.sharkova\\\\Learning\\\\React\\\\First\\\\database-viewer\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _inherits = require(\"C:\\\\Users\\\\elizaveta.sharkova\\\\Learning\\\\React\\\\First\\\\database-viewer\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar Deferred = require(\"./Deferred\");\n\nvar errors = require(\"./errors\");\n\nfunction fbind(fn, ctx) {\n  return function bound() {\n    return fn.apply(ctx, arguments);\n  };\n}\n/**\n * Wraps a users request for a resource\n * Basically a promise mashed in with a timeout\n * @private\n */\n\n\nvar ResourceRequest =\n/*#__PURE__*/\nfunction (_Deferred) {\n  _inherits(ResourceRequest, _Deferred);\n\n  /**\n   * [constructor description]\n   * @param  {Number} ttl     timeout\n   */\n  function ResourceRequest(ttl, Promise) {\n    var _this;\n\n    _classCallCheck(this, ResourceRequest);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResourceRequest).call(this, Promise));\n    _this._creationTimestamp = Date.now();\n    _this._timeout = null;\n\n    if (ttl !== undefined) {\n      _this.setTimeout(ttl);\n    }\n\n    return _this;\n  }\n\n  _createClass(ResourceRequest, [{\n    key: \"setTimeout\",\n    value: function (_setTimeout) {\n      function setTimeout(_x) {\n        return _setTimeout.apply(this, arguments);\n      }\n\n      setTimeout.toString = function () {\n        return _setTimeout.toString();\n      };\n\n      return setTimeout;\n    }(function (delay) {\n      if (this._state !== ResourceRequest.PENDING) {\n        return;\n      }\n\n      var ttl = parseInt(delay, 10);\n\n      if (isNaN(ttl) || ttl <= 0) {\n        throw new Error(\"delay must be a positive int\");\n      }\n\n      var age = Date.now() - this._creationTimestamp;\n\n      if (this._timeout) {\n        this.removeTimeout();\n      }\n\n      this._timeout = setTimeout(fbind(this._fireTimeout, this), Math.max(ttl - age, 0));\n    })\n  }, {\n    key: \"removeTimeout\",\n    value: function removeTimeout() {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n      }\n\n      this._timeout = null;\n    }\n  }, {\n    key: \"_fireTimeout\",\n    value: function _fireTimeout() {\n      this.reject(new errors.TimeoutError(\"ResourceRequest timed out\"));\n    }\n  }, {\n    key: \"reject\",\n    value: function reject(reason) {\n      this.removeTimeout();\n\n      _get(_getPrototypeOf(ResourceRequest.prototype), \"reject\", this).call(this, reason);\n    }\n  }, {\n    key: \"resolve\",\n    value: function resolve(value) {\n      this.removeTimeout();\n\n      _get(_getPrototypeOf(ResourceRequest.prototype), \"resolve\", this).call(this, value);\n    }\n  }]);\n\n  return ResourceRequest;\n}(Deferred);\n\nmodule.exports = ResourceRequest;","map":null,"metadata":{},"sourceType":"script"}