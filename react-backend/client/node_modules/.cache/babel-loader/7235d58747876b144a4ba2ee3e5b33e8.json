{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\elizaveta.sharkova\\\\Learning\\\\React\\\\First\\\\database-viewer\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\elizaveta.sharkova\\\\Learning\\\\React\\\\First\\\\database-viewer\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar DoublyLinkedList = require(\"./DoublyLinkedList\");\n\nvar DequeIterator = require(\"./DequeIterator\");\n/**\n * DoublyLinkedList backed double ended queue\n * implements just enough to keep the Pool\n */\n\n\nvar Deque =\n/*#__PURE__*/\nfunction () {\n  function Deque() {\n    _classCallCheck(this, Deque);\n\n    this._list = new DoublyLinkedList();\n  }\n  /**\n   * removes and returns the first element from the queue\n   * @return {any} [description]\n   */\n\n\n  _createClass(Deque, [{\n    key: \"shift\",\n    value: function shift() {\n      if (this.length === 0) {\n        return undefined;\n      }\n\n      var node = this._list.head;\n\n      this._list.remove(node);\n\n      return node.data;\n    }\n    /**\n     * adds one elemts to the beginning of the queue\n     * @param  {any} element [description]\n     * @return {any}         [description]\n     */\n\n  }, {\n    key: \"unshift\",\n    value: function unshift(element) {\n      var node = DoublyLinkedList.createNode(element);\n\n      this._list.insertBeginning(node);\n    }\n    /**\n     * adds one to the end of the queue\n     * @param  {any} element [description]\n     * @return {any}         [description]\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(element) {\n      var node = DoublyLinkedList.createNode(element);\n\n      this._list.insertEnd(node);\n    }\n    /**\n     * removes and returns the last element from the queue\n     */\n\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      if (this.length === 0) {\n        return undefined;\n      }\n\n      var node = this._list.tail;\n\n      this._list.remove(node);\n\n      return node.data;\n    }\n  }, {\n    key: Symbol.iterator,\n    value: function value() {\n      return new DequeIterator(this._list);\n    }\n  }, {\n    key: \"iterator\",\n    value: function iterator() {\n      return new DequeIterator(this._list);\n    }\n  }, {\n    key: \"reverseIterator\",\n    value: function reverseIterator() {\n      return new DequeIterator(this._list, true);\n    }\n    /**\n     * get a reference to the item at the head of the queue\n     * @return {any} [description]\n     */\n\n  }, {\n    key: \"head\",\n    get: function get() {\n      if (this.length === 0) {\n        return undefined;\n      }\n\n      var node = this._list.head;\n      return node.data;\n    }\n    /**\n     * get a reference to the item at the tail of the queue\n     * @return {any} [description]\n     */\n\n  }, {\n    key: \"tail\",\n    get: function get() {\n      if (this.length === 0) {\n        return undefined;\n      }\n\n      var node = this._list.tail;\n      return node.data;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._list.length;\n    }\n  }]);\n\n  return Deque;\n}();\n\nmodule.exports = Deque;","map":null,"metadata":{},"sourceType":"script"}