{"ast":null,"code":"'use strict';\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* globals $PropertyType */\n\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar WritableTrackingBuffer = require('./tracking-buffer/writable-tracking-buffer');\n\nvar TOKEN_TYPE = require('./token/token').TYPE;\n\nvar FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5,\n  // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8,\n  // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10,\n  // introduced in TDS 7.3.B\n  hidden: 1 << 13,\n  // introduced in TDS 7.2\n  key: 1 << 14,\n  // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n\n};\nvar DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n\nvar BulkLoad = function (_EventEmitter) {\n  (0, _inherits3.default)(BulkLoad, _EventEmitter);\n\n  function BulkLoad(table, connectionOptions, _ref, callback) {\n    var _ref$checkConstraints = _ref.checkConstraints,\n        checkConstraints = _ref$checkConstraints === undefined ? false : _ref$checkConstraints,\n        _ref$fireTriggers = _ref.fireTriggers,\n        fireTriggers = _ref$fireTriggers === undefined ? false : _ref$fireTriggers,\n        _ref$keepNulls = _ref.keepNulls,\n        keepNulls = _ref$keepNulls === undefined ? false : _ref$keepNulls,\n        _ref$lockTable = _ref.lockTable,\n        lockTable = _ref$lockTable === undefined ? false : _ref$lockTable;\n    (0, _classCallCheck3.default)(this, BulkLoad);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (BulkLoad.__proto__ || (0, _getPrototypeOf2.default)(BulkLoad)).call(this));\n\n    _this.error = undefined;\n    _this.canceled = false;\n    _this.timeout = undefined;\n    _this.table = table;\n    _this.options = connectionOptions;\n    _this.callback = callback;\n    _this.columns = [];\n    _this.columnsByName = {};\n    _this.rowsData = new WritableTrackingBuffer(1024, 'ucs2', true);\n    _this.firstRowWritten = false;\n\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n\n    _this.bulkOptions = {\n      checkConstraints: checkConstraints,\n      fireTriggers: fireTriggers,\n      keepNulls: keepNulls,\n      lockTable: lockTable\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(BulkLoad, [{\n    key: 'addColumn',\n    value: function addColumn(name, type, _ref2) {\n      var _ref2$output = _ref2.output,\n          output = _ref2$output === undefined ? false : _ref2$output,\n          length = _ref2.length,\n          precision = _ref2.precision,\n          scale = _ref2.scale,\n          _ref2$objName = _ref2.objName,\n          objName = _ref2$objName === undefined ? name : _ref2$objName,\n          _ref2$nullable = _ref2.nullable,\n          nullable = _ref2$nullable === undefined ? true : _ref2$nullable;\n\n      if (this.firstRowWritten) {\n        throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n      }\n\n      var column = {\n        type: type,\n        name: name,\n        value: null,\n        output: output,\n        length: length,\n        precision: precision,\n        scale: scale,\n        objName: objName,\n        nullable: nullable\n      };\n\n      if ((type.id & 0x30) === 0x20) {\n        if (column.length == undefined && type.resolveLength) {\n          column.length = type.resolveLength(column);\n        }\n      }\n\n      if (type.hasPrecision) {\n        if (column.precision == undefined && type.resolvePrecision) {\n          column.precision = type.resolvePrecision(column);\n        }\n      }\n\n      if (type.hasScale) {\n        if (column.scale == undefined && type.resolveScale) {\n          column.scale = type.resolveScale(column);\n        }\n      }\n\n      this.columns.push(column);\n      this.columnsByName[name] = column;\n    }\n  }, {\n    key: 'addRow',\n    value: function addRow() {\n      this.firstRowWritten = true;\n      var row = void 0;\n\n      for (var _len = arguments.length, input = Array(_len), _key = 0; _key < _len; _key++) {\n        input[_key] = arguments[_key];\n      }\n\n      if (input.length > 1 || !input[0] || typeof input[0] !== 'object') {\n        row = input;\n      } else {\n        row = input[0];\n      } // write row token\n\n\n      this.rowsData.writeUInt8(TOKEN_TYPE.ROW); // write each column\n\n      if (row instanceof Array) {\n        for (var i = 0, len = this.columns.length; i < len; i++) {\n          var c = this.columns[i];\n          c.type.writeParameterData(this.rowsData, {\n            length: c.length,\n            scale: c.scale,\n            precision: c.precision,\n            value: row[i]\n          }, this.options);\n        }\n      } else {\n        for (var _i = 0, _len2 = this.columns.length; _i < _len2; _i++) {\n          var _c = this.columns[_i];\n\n          _c.type.writeParameterData(this.rowsData, {\n            length: _c.length,\n            scale: _c.scale,\n            precision: _c.precision,\n            value: row[_c.objName]\n          }, this.options);\n        }\n      }\n    }\n  }, {\n    key: 'getOptionsSql',\n    value: function getOptionsSql() {\n      var addOptions = [];\n\n      if (this.bulkOptions.checkConstraints) {\n        addOptions.push('CHECK_CONSTRAINTS');\n      }\n\n      if (this.bulkOptions.fireTriggers) {\n        addOptions.push('FIRE_TRIGGERS');\n      }\n\n      if (this.bulkOptions.keepNulls) {\n        addOptions.push('KEEP_NULLS');\n      }\n\n      if (this.bulkOptions.lockTable) {\n        addOptions.push('TABLOCK');\n      }\n\n      if (addOptions.length > 0) {\n        return \" WITH (\".concat(addOptions.join(','), \")\");\n      } else {\n        return '';\n      }\n    }\n  }, {\n    key: 'getBulkInsertSql',\n    value: function getBulkInsertSql() {\n      var sql = 'insert bulk ' + this.table + '(';\n\n      for (var i = 0, len = this.columns.length; i < len; i++) {\n        var c = this.columns[i];\n\n        if (i !== 0) {\n          sql += ', ';\n        }\n\n        sql += '[' + c.name + '] ' + c.type.declaration(c);\n      }\n\n      sql += ')';\n      sql += this.getOptionsSql();\n      return sql;\n    }\n  }, {\n    key: 'getTableCreationSql',\n    value: function getTableCreationSql() {\n      var sql = 'CREATE TABLE ' + this.table + '(\\n';\n\n      for (var i = 0, len = this.columns.length; i < len; i++) {\n        var c = this.columns[i];\n\n        if (i !== 0) {\n          sql += ',\\n';\n        }\n\n        sql += '[' + c.name + '] ' + c.type.declaration(c);\n\n        if (c.nullable !== undefined) {\n          sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n        }\n      }\n\n      sql += '\\n)';\n      return sql;\n    }\n  }, {\n    key: 'getPayload',\n    value: function getPayload() {\n      // Create COLMETADATA token\n      var metaData = this.getColMetaData();\n      var length = metaData.length; // row data\n\n      var rows = this.rowsData.data;\n      length += rows.length; // Create DONE token\n      // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n\n      var tBuf = new WritableTrackingBuffer(this.options.tdsVersion < '7_2' ? 9 : 13);\n      tBuf.writeUInt8(TOKEN_TYPE.DONE);\n      var status = DONE_STATUS.FINAL;\n      tBuf.writeUInt16LE(status);\n      tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n\n      tBuf.writeUInt32LE(0); // row count - doesn't really matter\n\n      if (this.options.tdsVersion >= '7_2') {\n        tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n      }\n\n      var done = tBuf.data;\n      length += done.length; // composite payload\n\n      var payload = new WritableTrackingBuffer(length);\n      payload.copyFrom(metaData);\n      payload.copyFrom(rows);\n      payload.copyFrom(done);\n      return payload;\n    }\n  }, {\n    key: 'getColMetaData',\n    value: function getColMetaData() {\n      var tBuf = new WritableTrackingBuffer(100, null, true); // TokenType\n\n      tBuf.writeUInt8(TOKEN_TYPE.COLMETADATA); // Count\n\n      tBuf.writeUInt16LE(this.columns.length);\n\n      for (var j = 0, len = this.columns.length; j < len; j++) {\n        var c = this.columns[j]; // UserType\n\n        if (this.options.tdsVersion < '7_2') {\n          tBuf.writeUInt16LE(0);\n        } else {\n          tBuf.writeUInt32LE(0);\n        } // Flags\n\n\n        var flags = FLAGS.updateableReadWrite;\n\n        if (c.nullable) {\n          flags |= FLAGS.nullable;\n        } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n          flags |= FLAGS.nullableUnknown;\n        }\n\n        tBuf.writeUInt16LE(flags); // TYPE_INFO\n\n        c.type.writeTypeInfo(tBuf, c, this.options); // ColName\n\n        tBuf.writeBVarchar(c.name, 'ucs2');\n      }\n\n      return tBuf.data;\n    }\n  }, {\n    key: 'setTimeout',\n    value: function setTimeout(timeout) {\n      this.timeout = timeout;\n    }\n  }]);\n  return BulkLoad;\n}(EventEmitter);\n\nmodule.exports = BulkLoad;","map":null,"metadata":{},"sourceType":"script"}