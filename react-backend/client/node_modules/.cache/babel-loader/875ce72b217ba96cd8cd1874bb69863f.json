{"ast":null,"code":"'use strict';\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar Transform = require('readable-stream').Transform;\n\nvar TYPE = require('./token').TYPE;\n\nvar tokenParsers = {};\ntokenParsers[TYPE.COLMETADATA] = require('./colmetadata-token-parser');\ntokenParsers[TYPE.DONE] = require('./done-token-parser').doneParser;\ntokenParsers[TYPE.DONEINPROC] = require('./done-token-parser').doneInProcParser;\ntokenParsers[TYPE.DONEPROC] = require('./done-token-parser').doneProcParser;\ntokenParsers[TYPE.ENVCHANGE] = require('./env-change-token-parser');\ntokenParsers[TYPE.ERROR] = require('./infoerror-token-parser').errorParser;\ntokenParsers[TYPE.INFO] = require('./infoerror-token-parser').infoParser;\ntokenParsers[TYPE.LOGINACK] = require('./loginack-token-parser');\ntokenParsers[TYPE.ORDER] = require('./order-token-parser');\ntokenParsers[TYPE.RETURNSTATUS] = require('./returnstatus-token-parser');\ntokenParsers[TYPE.RETURNVALUE] = require('./returnvalue-token-parser');\ntokenParsers[TYPE.ROW] = require('./row-token-parser');\ntokenParsers[TYPE.NBCROW] = require('./nbcrow-token-parser');\ntokenParsers[TYPE.SSPI] = require('./sspi-token-parser');\n\nmodule.exports = function (_Transform) {\n  (0, _inherits3.default)(Parser, _Transform);\n\n  function Parser(debug, colMetadata, options) {\n    (0, _classCallCheck3.default)(this, Parser);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Parser.__proto__ || (0, _getPrototypeOf2.default)(Parser)).call(this, {\n      objectMode: true\n    }));\n\n    _this.debug = debug;\n    _this.colMetadata = colMetadata;\n    _this.options = options;\n    _this.endOfMessageMarker = {};\n    _this.buffer = new Buffer(0);\n    _this.position = 0;\n    _this.suspended = false;\n    _this.await = undefined;\n    _this.next = undefined;\n    return _this;\n  }\n\n  (0, _createClass3.default)(Parser, [{\n    key: '_transform',\n    value: function _transform(input, encoding, done) {\n      if (input === this.endOfMessageMarker) {\n        done(null, {\n          // generate endOfMessage pseudo token\n          name: 'EOM',\n          event: 'endOfMessage'\n        });\n        return;\n      }\n\n      if (this.position === this.buffer.length) {\n        this.buffer = input;\n      } else {\n        this.buffer = Buffer.concat([this.buffer.slice(this.position), input]);\n      }\n\n      this.position = 0; // This will be called once we need to wait for more data to\n      // become available\n\n      this.await = done;\n\n      if (this.suspended) {\n        // Unsuspend and continue from where ever we left off.\n        this.suspended = false;\n        this.next.call(null);\n      } // If we're no longer suspended, parse new tokens\n\n\n      if (!this.suspended) {\n        // Start the parser\n        this.parseTokens();\n      }\n    }\n  }, {\n    key: 'parseTokens',\n    value: function parseTokens() {\n      var _this2 = this;\n\n      var doneParsing = function doneParsing(token) {\n        if (token) {\n          switch (token.name) {\n            case 'COLMETADATA':\n              _this2.colMetadata = token.columns;\n          }\n\n          _this2.push(token);\n        }\n      };\n\n      while (!this.suspended && this.position + 1 <= this.buffer.length) {\n        var type = this.buffer.readUInt8(this.position);\n        this.position += 1;\n\n        if (tokenParsers[type]) {\n          tokenParsers[type](this, this.colMetadata, this.options, doneParsing);\n        } else {\n          this.emit('error', new Error('Unknown type: ' + type));\n        }\n      }\n\n      if (!this.suspended && this.position === this.buffer.length) {\n        // If we reached the end of the buffer, we can stop parsing now.\n        return this.await.call(null);\n      }\n    }\n  }, {\n    key: 'suspend',\n    value: function suspend(next) {\n      this.suspended = true;\n      this.next = next;\n      this.await.call(null);\n    }\n  }, {\n    key: 'awaitData',\n    value: function awaitData(length, callback) {\n      var _this3 = this;\n\n      if (this.position + length <= this.buffer.length) {\n        callback();\n      } else {\n        this.suspend(function () {\n          _this3.awaitData(length, callback);\n        });\n      }\n    }\n  }, {\n    key: 'readInt8',\n    value: function readInt8(callback) {\n      var _this4 = this;\n\n      this.awaitData(1, function () {\n        var data = _this4.buffer.readInt8(_this4.position);\n\n        _this4.position += 1;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readUInt8',\n    value: function readUInt8(callback) {\n      var _this5 = this;\n\n      this.awaitData(1, function () {\n        var data = _this5.buffer.readUInt8(_this5.position);\n\n        _this5.position += 1;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readInt16LE',\n    value: function readInt16LE(callback) {\n      var _this6 = this;\n\n      this.awaitData(2, function () {\n        var data = _this6.buffer.readInt16LE(_this6.position);\n\n        _this6.position += 2;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readInt16BE',\n    value: function readInt16BE(callback) {\n      var _this7 = this;\n\n      this.awaitData(2, function () {\n        var data = _this7.buffer.readInt16BE(_this7.position);\n\n        _this7.position += 2;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readUInt16LE',\n    value: function readUInt16LE(callback) {\n      var _this8 = this;\n\n      this.awaitData(2, function () {\n        var data = _this8.buffer.readUInt16LE(_this8.position);\n\n        _this8.position += 2;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readUInt16BE',\n    value: function readUInt16BE(callback) {\n      var _this9 = this;\n\n      this.awaitData(2, function () {\n        var data = _this9.buffer.readUInt16BE(_this9.position);\n\n        _this9.position += 2;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readInt32LE',\n    value: function readInt32LE(callback) {\n      var _this10 = this;\n\n      this.awaitData(4, function () {\n        var data = _this10.buffer.readInt32LE(_this10.position);\n\n        _this10.position += 4;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readInt32BE',\n    value: function readInt32BE(callback) {\n      var _this11 = this;\n\n      this.awaitData(4, function () {\n        var data = _this11.buffer.readInt32BE(_this11.position);\n\n        _this11.position += 4;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readUInt32LE',\n    value: function readUInt32LE(callback) {\n      var _this12 = this;\n\n      this.awaitData(4, function () {\n        var data = _this12.buffer.readUInt32LE(_this12.position);\n\n        _this12.position += 4;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readUInt32BE',\n    value: function readUInt32BE(callback) {\n      var _this13 = this;\n\n      this.awaitData(4, function () {\n        var data = _this13.buffer.readUInt32BE(_this13.position);\n\n        _this13.position += 4;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readInt64LE',\n    value: function readInt64LE(callback) {\n      var _this14 = this;\n\n      this.awaitData(8, function () {\n        var data = Math.pow(2, 32) * _this14.buffer.readInt32LE(_this14.position + 4) + (_this14.buffer[_this14.position + 4] & 0x80 === 0x80 ? 1 : -1) * _this14.buffer.readUInt32LE(_this14.position);\n\n        _this14.position += 8;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readInt64BE',\n    value: function readInt64BE(callback) {\n      var _this15 = this;\n\n      this.awaitData(8, function () {\n        var data = Math.pow(2, 32) * _this15.buffer.readInt32BE(_this15.position) + (_this15.buffer[_this15.position] & 0x80 === 0x80 ? 1 : -1) * _this15.buffer.readUInt32BE(_this15.position + 4);\n\n        _this15.position += 8;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readUInt64LE',\n    value: function readUInt64LE(callback) {\n      var _this16 = this;\n\n      this.awaitData(8, function () {\n        var data = Math.pow(2, 32) * _this16.buffer.readUInt32LE(_this16.position + 4) + _this16.buffer.readUInt32LE(_this16.position);\n\n        _this16.position += 8;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readUInt64BE',\n    value: function readUInt64BE(callback) {\n      var _this17 = this;\n\n      this.awaitData(8, function () {\n        var data = Math.pow(2, 32) * _this17.buffer.readUInt32BE(_this17.position) + _this17.buffer.readUInt32BE(_this17.position + 4);\n\n        _this17.position += 8;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readFloatLE',\n    value: function readFloatLE(callback) {\n      var _this18 = this;\n\n      this.awaitData(4, function () {\n        var data = _this18.buffer.readFloatLE(_this18.position);\n\n        _this18.position += 4;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readFloatBE',\n    value: function readFloatBE(callback) {\n      var _this19 = this;\n\n      this.awaitData(4, function () {\n        var data = _this19.buffer.readFloatBE(_this19.position);\n\n        _this19.position += 4;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readDoubleLE',\n    value: function readDoubleLE(callback) {\n      var _this20 = this;\n\n      this.awaitData(8, function () {\n        var data = _this20.buffer.readDoubleLE(_this20.position);\n\n        _this20.position += 8;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readDoubleBE',\n    value: function readDoubleBE(callback) {\n      var _this21 = this;\n\n      this.awaitData(8, function () {\n        var data = _this21.buffer.readDoubleBE(_this21.position);\n\n        _this21.position += 8;\n        callback(data);\n      });\n    }\n  }, {\n    key: 'readUInt24LE',\n    value: function readUInt24LE(callback) {\n      var _this22 = this;\n\n      this.awaitData(3, function () {\n        var low = _this22.buffer.readUInt16LE(_this22.position);\n\n        var high = _this22.buffer.readUInt8(_this22.position + 2);\n\n        _this22.position += 3;\n        callback(low | high << 16);\n      });\n    }\n  }, {\n    key: 'readUInt40LE',\n    value: function readUInt40LE(callback) {\n      var _this23 = this;\n\n      this.awaitData(5, function () {\n        var low = _this23.buffer.readUInt32LE(_this23.position);\n\n        var high = _this23.buffer.readUInt8(_this23.position + 4);\n\n        _this23.position += 5;\n        callback(0x100000000 * high + low);\n      });\n    }\n  }, {\n    key: 'readUNumeric64LE',\n    value: function readUNumeric64LE(callback) {\n      var _this24 = this;\n\n      this.awaitData(8, function () {\n        var low = _this24.buffer.readUInt32LE(_this24.position);\n\n        var high = _this24.buffer.readUInt32LE(_this24.position + 4);\n\n        _this24.position += 8;\n        callback(0x100000000 * high + low);\n      });\n    }\n  }, {\n    key: 'readUNumeric96LE',\n    value: function readUNumeric96LE(callback) {\n      var _this25 = this;\n\n      this.awaitData(12, function () {\n        var dword1 = _this25.buffer.readUInt32LE(_this25.position);\n\n        var dword2 = _this25.buffer.readUInt32LE(_this25.position + 4);\n\n        var dword3 = _this25.buffer.readUInt32LE(_this25.position + 8);\n\n        _this25.position += 12;\n        callback(dword1 + 0x100000000 * dword2 + 0x100000000 * 0x100000000 * dword3);\n      });\n    }\n  }, {\n    key: 'readUNumeric128LE',\n    value: function readUNumeric128LE(callback) {\n      var _this26 = this;\n\n      this.awaitData(16, function () {\n        var dword1 = _this26.buffer.readUInt32LE(_this26.position);\n\n        var dword2 = _this26.buffer.readUInt32LE(_this26.position + 4);\n\n        var dword3 = _this26.buffer.readUInt32LE(_this26.position + 8);\n\n        var dword4 = _this26.buffer.readUInt32LE(_this26.position + 12);\n\n        _this26.position += 16;\n        callback(dword1 + 0x100000000 * dword2 + 0x100000000 * 0x100000000 * dword3 + 0x100000000 * 0x100000000 * 0x100000000 * dword4);\n      });\n    } // Variable length data\n\n  }, {\n    key: 'readBuffer',\n    value: function readBuffer(length, callback) {\n      var _this27 = this;\n\n      this.awaitData(length, function () {\n        var data = _this27.buffer.slice(_this27.position, _this27.position + length);\n\n        _this27.position += length;\n        callback(data);\n      });\n    } // Read a Unicode String (BVARCHAR)\n\n  }, {\n    key: 'readBVarChar',\n    value: function readBVarChar(callback) {\n      var _this28 = this;\n\n      this.readUInt8(function (length) {\n        _this28.readBuffer(length * 2, function (data) {\n          callback(data.toString('ucs2'));\n        });\n      });\n    } // Read a Unicode String (USVARCHAR)\n\n  }, {\n    key: 'readUsVarChar',\n    value: function readUsVarChar(callback) {\n      var _this29 = this;\n\n      this.readUInt16LE(function (length) {\n        _this29.readBuffer(length * 2, function (data) {\n          callback(data.toString('ucs2'));\n        });\n      });\n    } // Read binary data (BVARBYTE)\n\n  }, {\n    key: 'readBVarByte',\n    value: function readBVarByte(callback) {\n      var _this30 = this;\n\n      this.readUInt8(function (length) {\n        _this30.readBuffer(length, callback);\n      });\n    } // Read binary data (USVARBYTE)\n\n  }, {\n    key: 'readUsVarByte',\n    value: function readUsVarByte(callback) {\n      var _this31 = this;\n\n      this.readUInt16LE(function (length) {\n        _this31.readBuffer(length, callback);\n      });\n    }\n  }]);\n  return Parser;\n}(Transform);","map":null,"metadata":{},"sourceType":"script"}