{"ast":null,"code":"'use strict';\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar BufferList = require('bl');\n\nvar _require = require('readable-stream'),\n    Duplex = _require.Duplex;\n\nvar _require2 = require('./packet'),\n    Packet = _require2.Packet,\n    HEADER_LENGTH = _require2.HEADER_LENGTH;\n\nvar OutgoingMessageStream = function (_Duplex) {\n  (0, _inherits3.default)(OutgoingMessageStream, _Duplex);\n\n  function OutgoingMessageStream(debug, _ref) {\n    var packetSize = _ref.packetSize;\n    (0, _classCallCheck3.default)(this, OutgoingMessageStream);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (OutgoingMessageStream.__proto__ || (0, _getPrototypeOf2.default)(OutgoingMessageStream)).call(this, {\n      writableObjectMode: true\n    }));\n\n    _this.packetSize = packetSize;\n    _this.debug = debug;\n    _this.bl = new BufferList(); // When the writable side is ended, push `null`\n    // to also end the readable side.\n\n    _this.on('finish', function () {\n      _this.push(null);\n    });\n\n    return _this;\n  }\n\n  (0, _createClass3.default)(OutgoingMessageStream, [{\n    key: '_write',\n    value: function _write(message, encoding, callback) {\n      var _this2 = this;\n\n      var length = this.packetSize - HEADER_LENGTH;\n      var packetNumber = 0;\n      this.currentMessage = message;\n      this.currentMessage.on('data', function (data) {\n        _this2.bl.append(data);\n\n        while (_this2.bl.length > length) {\n          var _data = _this2.bl.slice(0, length);\n\n          _this2.bl.consume(length); // TODO: Get rid of creating `Packet` instances here.\n\n\n          var packet = new Packet(message.type);\n          packet.packetId(packetNumber += 1);\n          packet.resetConnection(message.resetConnection);\n          packet.addData(_data);\n\n          _this2.debug.packet('Sent', packet);\n\n          _this2.debug.data(packet);\n\n          if (_this2.push(packet.buffer) === false) {\n            _this2.currentMessage.pause();\n          }\n        }\n      });\n      this.currentMessage.on('end', function () {\n        var data = _this2.bl.slice();\n\n        _this2.bl.consume(data.length); // TODO: Get rid of creating `Packet` instances here.\n\n\n        var packet = new Packet(message.type);\n        packet.packetId(packetNumber += 1);\n        packet.resetConnection(message.resetConnection);\n        packet.last(true);\n        packet.addData(data);\n\n        _this2.debug.packet('Sent', packet);\n\n        _this2.debug.data(packet);\n\n        _this2.push(packet.buffer);\n\n        _this2.currentMessage = undefined;\n        callback();\n      });\n    }\n  }, {\n    key: '_read',\n    value: function _read(size) {\n      // If we do have a message, resume it and get data flowing.\n      // Otherwise, there is nothing to do.\n      if (this.currentMessage) {\n        this.currentMessage.resume();\n      }\n    }\n  }]);\n  return OutgoingMessageStream;\n}(Duplex);\n\nmodule.exports = OutgoingMessageStream;","map":null,"metadata":{},"sourceType":"script"}