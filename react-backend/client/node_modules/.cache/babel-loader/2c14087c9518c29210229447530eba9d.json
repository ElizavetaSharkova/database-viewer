{"ast":null,"code":"\"use strict\";\n/**\n * A Doubly Linked List, because there aren't enough in the world...\n * this is pretty much a direct JS port of the one wikipedia\n * https://en.wikipedia.org/wiki/Doubly_linked_list\n *\n * For most usage 'insertBeginning' and 'insertEnd' should be enough\n *\n * nodes are expected to something like a POJSO like\n * {\n *   prev: null,\n *   next: null,\n *   something: 'whatever you like'\n * }\n */\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\elizaveta.sharkova\\\\Learning\\\\React\\\\First\\\\database-viewer\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\elizaveta.sharkova\\\\Learning\\\\React\\\\First\\\\database-viewer\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar DoublyLinkedList =\n/*#__PURE__*/\nfunction () {\n  function DoublyLinkedList() {\n    _classCallCheck(this, DoublyLinkedList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  _createClass(DoublyLinkedList, [{\n    key: \"insertBeginning\",\n    value: function insertBeginning(node) {\n      if (this.head === null) {\n        this.head = node;\n        this.tail = node;\n        node.prev = null;\n        node.next = null;\n        this.length++;\n      } else {\n        this.insertBefore(this.head, node);\n      }\n    }\n  }, {\n    key: \"insertEnd\",\n    value: function insertEnd(node) {\n      if (this.tail === null) {\n        this.insertBeginning(node);\n      } else {\n        this.insertAfter(this.tail, node);\n      }\n    }\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(node, newNode) {\n      newNode.prev = node;\n      newNode.next = node.next;\n\n      if (node.next === null) {\n        this.tail = newNode;\n      } else {\n        node.next.prev = newNode;\n      }\n\n      node.next = newNode;\n      this.length++;\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(node, newNode) {\n      newNode.prev = node.prev;\n      newNode.next = node;\n\n      if (node.prev === null) {\n        this.head = newNode;\n      } else {\n        node.prev.next = newNode;\n      }\n\n      node.prev = newNode;\n      this.length++;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(node) {\n      if (node.prev === null) {\n        this.head = node.next;\n      } else {\n        node.prev.next = node.next;\n      }\n\n      if (node.next === null) {\n        this.tail = node.prev;\n      } else {\n        node.next.prev = node.prev;\n      }\n\n      node.prev = null;\n      node.next = null;\n      this.length--;\n    } // FIXME: this should not live here and has become a dumping ground...\n\n  }], [{\n    key: \"createNode\",\n    value: function createNode(data) {\n      return {\n        prev: null,\n        next: null,\n        data: data\n      };\n    }\n  }]);\n\n  return DoublyLinkedList;\n}();\n\nmodule.exports = DoublyLinkedList;","map":null,"metadata":{},"sourceType":"script"}