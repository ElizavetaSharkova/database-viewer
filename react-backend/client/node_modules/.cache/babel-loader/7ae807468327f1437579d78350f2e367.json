{"ast":null,"code":"'use strict';\n\nfunction parseToken(parser, options, callback) {\n  // length\n  parser.readUInt16LE(function () {\n    parser.readUInt32LE(function (number) {\n      parser.readUInt8(function (state) {\n        parser.readUInt8(function (clazz) {\n          parser.readUsVarChar(function (message) {\n            parser.readBVarChar(function (serverName) {\n              parser.readBVarChar(function (procName) {\n                (options.tdsVersion < '7_2' ? parser.readUInt16LE : parser.readUInt32LE).call(parser, function (lineNumber) {\n                  callback({\n                    'number': number,\n                    'state': state,\n                    'class': clazz,\n                    'message': message,\n                    'serverName': serverName,\n                    'procName': procName,\n                    'lineNumber': lineNumber\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\nmodule.exports.infoParser = infoParser;\n\nfunction infoParser(parser, colMetadata, options, callback) {\n  parseToken(parser, options, function (token) {\n    token.name = 'INFO';\n    token.event = 'infoMessage';\n    callback(token);\n  });\n}\n\nmodule.exports.errorParser = errorParser;\n\nfunction errorParser(parser, colMetadata, options, callback) {\n  parseToken(parser, options, function (token) {\n    token.name = 'ERROR';\n    token.event = 'errorMessage';\n    callback(token);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}