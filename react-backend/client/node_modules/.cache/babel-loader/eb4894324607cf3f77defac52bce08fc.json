{"ast":null,"code":"'use strict';\n\nvar _create = require('babel-runtime/core-js/object/create');\n\nvar _create2 = _interopRequireDefault(_create);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar net = require('net');\n\nvar dns = require('dns');\n\nvar punycode = require('punycode');\n\nvar Connector = function () {\n  function Connector(options, multiSubnetFailover) {\n    (0, _classCallCheck3.default)(this, Connector);\n    this.options = options;\n    this.multiSubnetFailover = multiSubnetFailover;\n  }\n\n  (0, _createClass3.default)(Connector, [{\n    key: 'execute',\n    value: function execute(cb) {\n      if (net.isIP(this.options.host)) {\n        this.executeForIP(cb);\n      } else {\n        this.executeForHostname(cb);\n      }\n    }\n  }, {\n    key: 'executeForIP',\n    value: function executeForIP(cb) {\n      var socket = net.connect(this.options);\n\n      var onError = function onError(err) {\n        socket.removeListener('error', onError);\n        socket.removeListener('connect', onConnect);\n        socket.destroy();\n        cb(err);\n      };\n\n      var onConnect = function onConnect() {\n        socket.removeListener('error', onError);\n        socket.removeListener('connect', onConnect);\n        cb(null, socket);\n      };\n\n      socket.on('error', onError);\n      socket.on('connect', onConnect);\n    }\n  }, {\n    key: 'executeForHostname',\n    value: function executeForHostname(cb) {\n      var _this = this;\n\n      dns.lookup(punycode.toASCII(this.options.host), {\n        all: true\n      }, function (err, addresses) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (_this.multiSubnetFailover) {\n          new ParallelConnectionStrategy(addresses, _this.options).connect(cb);\n        } else {\n          new SequentialConnectionStrategy(addresses, _this.options).connect(cb);\n        }\n      });\n    }\n  }]);\n  return Connector;\n}();\n\nvar ParallelConnectionStrategy = function () {\n  function ParallelConnectionStrategy(addresses, options) {\n    (0, _classCallCheck3.default)(this, ParallelConnectionStrategy);\n    this.addresses = addresses;\n    this.options = options;\n  }\n\n  (0, _createClass3.default)(ParallelConnectionStrategy, [{\n    key: 'connect',\n    value: function connect(callback) {\n      var addresses = this.addresses;\n      var sockets = new Array(addresses.length);\n      var errorCount = 0;\n\n      var onError = function onError(err) {\n        errorCount += 1;\n        this.removeListener('error', onError);\n        this.removeListener('connect', onConnect);\n\n        if (errorCount === addresses.length) {\n          callback(new Error('Could not connect (parallel)'));\n        }\n      };\n\n      var onConnect = function onConnect() {\n        for (var j = 0; j < sockets.length; j++) {\n          var socket = sockets[j];\n\n          if (this === socket) {\n            continue;\n          }\n\n          socket.removeListener('error', onError);\n          socket.removeListener('connect', onConnect);\n          socket.destroy();\n        }\n\n        callback(null, this);\n      };\n\n      for (var i = 0, len = addresses.length; i < len; i++) {\n        var socket = sockets[i] = net.connect((0, _create2.default)(this.options, {\n          host: {\n            value: addresses[i].address\n          }\n        }));\n        socket.on('error', onError);\n        socket.on('connect', onConnect);\n      }\n    }\n  }]);\n  return ParallelConnectionStrategy;\n}();\n\nvar SequentialConnectionStrategy = function () {\n  function SequentialConnectionStrategy(addresses, options) {\n    (0, _classCallCheck3.default)(this, SequentialConnectionStrategy);\n    this.addresses = addresses;\n    this.options = options;\n  }\n\n  (0, _createClass3.default)(SequentialConnectionStrategy, [{\n    key: 'connect',\n    value: function connect(callback) {\n      var _this2 = this;\n\n      var addresses = this.addresses;\n\n      if (!addresses.length) {\n        callback(new Error('Could not connect (sequence)'));\n        return;\n      }\n\n      var next = addresses.shift();\n      var socket = net.connect((0, _create2.default)(this.options, {\n        host: {\n          value: next.address\n        }\n      }));\n\n      var onError = function onError(err) {\n        socket.removeListener('error', onError);\n        socket.removeListener('connect', onConnect);\n        socket.destroy();\n\n        _this2.connect(callback);\n      };\n\n      var onConnect = function onConnect() {\n        socket.removeListener('error', onError);\n        socket.removeListener('connect', onConnect);\n        callback(null, socket);\n      };\n\n      socket.on('error', onError);\n      socket.on('connect', onConnect);\n    }\n  }]);\n  return SequentialConnectionStrategy;\n}();\n\nmodule.exports.Connector = Connector;\nmodule.exports.ParallelConnectionStrategy = ParallelConnectionStrategy;\nmodule.exports.SequentialConnectionStrategy = SequentialConnectionStrategy;","map":null,"metadata":{},"sourceType":"script"}