{"ast":null,"code":"'use strict';\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar TYPES = require('./data-type').typeByName;\n\nvar RequestError = require('./errors').RequestError; // TODO: Figure out how to type the `rows` parameter here.\n\n\nvar Request = function (_EventEmitter) {\n  (0, _inherits3.default)(Request, _EventEmitter); // TODO: This should be `Connection`, not `any`.\n\n  function Request(sqlTextOrProcedure, callback) {\n    (0, _classCallCheck3.default)(this, Request);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Request.__proto__ || (0, _getPrototypeOf2.default)(Request)).call(this));\n\n    _this.sqlTextOrProcedure = sqlTextOrProcedure;\n    _this.parameters = [];\n    _this.parametersByName = {};\n    _this.originalParameters = [];\n    _this.preparing = false;\n    _this.handle = undefined;\n    _this.canceled = false;\n    _this.paused = false;\n    _this.error = undefined;\n    _this.connection = undefined;\n    _this.timeout = undefined;\n    _this.userCallback = callback;\n\n    _this.callback = function (err) {\n      if (this.preparing) {\n        this.preparing = false;\n\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback.apply(this, arguments);\n        this.emit('requestCompleted');\n      }\n    };\n\n    return _this;\n  } // TODO: `type` must be a valid TDS value type\n\n\n  (0, _createClass3.default)(Request, [{\n    key: 'addParameter',\n    value: function addParameter(name, type, value, options) {\n      if (options == null) {\n        options = {};\n      }\n\n      var parameter = {\n        type: type,\n        name: name,\n        value: value,\n        output: options.output || (options.output = false),\n        length: options.length,\n        precision: options.precision,\n        scale: options.scale\n      };\n      this.parameters.push(parameter);\n      this.parametersByName[name] = parameter;\n    } // TODO: `type` must be a valid TDS value type\n\n  }, {\n    key: 'addOutputParameter',\n    value: function addOutputParameter(name, type, value, options) {\n      if (options == null) {\n        options = {};\n      }\n\n      options.output = true;\n      this.addParameter(name, type, value, options);\n    }\n  }, {\n    key: 'makeParamsParameter',\n    value: function makeParamsParameter(parameters) {\n      var paramsParameter = '';\n\n      for (var i = 0, len = parameters.length; i < len; i++) {\n        var parameter = parameters[i];\n\n        if (paramsParameter.length > 0) {\n          paramsParameter += ', ';\n        }\n\n        paramsParameter += '@' + parameter.name + ' ';\n        paramsParameter += parameter.type.declaration(parameter);\n\n        if (parameter.output) {\n          paramsParameter += ' OUTPUT';\n        }\n      }\n\n      return paramsParameter;\n    }\n  }, {\n    key: 'transformIntoExecuteSqlRpc',\n    value: function transformIntoExecuteSqlRpc() {\n      if (this.validateParameters()) {\n        return;\n      }\n\n      this.originalParameters = this.parameters;\n      this.parameters = [];\n      this.addParameter('statement', TYPES.NVarChar, this.sqlTextOrProcedure);\n\n      if (this.originalParameters.length) {\n        this.addParameter('params', TYPES.NVarChar, this.makeParamsParameter(this.originalParameters));\n      }\n\n      for (var i = 0, len = this.originalParameters.length; i < len; i++) {\n        var parameter = this.originalParameters[i];\n        this.parameters.push(parameter);\n      }\n\n      this.sqlTextOrProcedure = 'sp_executesql';\n    }\n  }, {\n    key: 'transformIntoPrepareRpc',\n    value: function transformIntoPrepareRpc() {\n      var _this2 = this;\n\n      this.originalParameters = this.parameters;\n      this.parameters = [];\n      this.addOutputParameter('handle', TYPES.Int);\n      this.addParameter('params', TYPES.NVarChar, this.makeParamsParameter(this.originalParameters));\n      this.addParameter('stmt', TYPES.NVarChar, this.sqlTextOrProcedure);\n      this.sqlTextOrProcedure = 'sp_prepare';\n      this.preparing = true;\n      this.on('returnValue', function (name, value) {\n        if (name === 'handle') {\n          _this2.handle = value;\n        } else {\n          _this2.error = RequestError(\"Tedious > Unexpected output parameter \".concat(name, \" from sp_prepare\"));\n        }\n      });\n    }\n  }, {\n    key: 'transformIntoUnprepareRpc',\n    value: function transformIntoUnprepareRpc() {\n      this.parameters = [];\n      this.addParameter('handle', TYPES.Int, this.handle);\n      this.sqlTextOrProcedure = 'sp_unprepare';\n    }\n  }, {\n    key: 'transformIntoExecuteRpc',\n    value: function transformIntoExecuteRpc(parameters) {\n      this.parameters = [];\n      this.addParameter('handle', TYPES.Int, this.handle);\n\n      for (var i = 0, len = this.originalParameters.length; i < len; i++) {\n        var parameter = this.originalParameters[i];\n        parameter.value = parameters[parameter.name];\n        this.parameters.push(parameter);\n      }\n\n      if (this.validateParameters()) {\n        return;\n      }\n\n      this.sqlTextOrProcedure = 'sp_execute';\n    }\n  }, {\n    key: 'validateParameters',\n    value: function validateParameters() {\n      for (var i = 0, len = this.parameters.length; i < len; i++) {\n        var parameter = this.parameters[i];\n\n        var _value = parameter.type.validate(parameter.value);\n\n        if (_value instanceof TypeError) {\n          return this.error = new RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + _value.message, 'EPARAM');\n        }\n\n        parameter.value = _value;\n      }\n\n      return null;\n    } // Temporarily suspends the flow of data from the database.\n    // No more 'row' events will be emitted until resume() is called.\n\n  }, {\n    key: 'pause',\n    value: function pause() {\n      if (this.paused) {\n        return;\n      }\n\n      this.paused = true;\n\n      if (this.connection) {\n        this.connection.pauseRequest(this);\n      }\n    } // Resumes the flow of data from the database.\n\n  }, {\n    key: 'resume',\n    value: function resume() {\n      if (!this.paused) {\n        return;\n      }\n\n      this.paused = false;\n\n      if (this.connection) {\n        this.connection.resumeRequest(this);\n      }\n    }\n  }, {\n    key: 'setTimeout',\n    value: function setTimeout(timeout) {\n      this.timeout = timeout;\n    }\n  }]);\n  return Request;\n}(EventEmitter);\n\nmodule.exports = Request;","map":null,"metadata":{},"sourceType":"script"}