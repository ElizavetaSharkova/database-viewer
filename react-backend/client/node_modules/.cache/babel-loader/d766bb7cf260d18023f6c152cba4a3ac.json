{"ast":null,"code":"/*!\n * n.js -> Arithmetic operations on big integers\n * Pure javascript implementation, no external libraries needed\n * Copyright(c) 2012-2014 Alex Bardas <alex.bardas@gmail.com>\n * MIT Licensed\n * It supports the following operations:\n *      addition, subtraction, multiplication, division, power, absolute value\n * It works with both positive and negative integers\n */\n;\n\n(function (exports, undefined) {\n  var version = \"0.3.1\"; // Helper function which tests if a given character is a digit\n\n  var test_digit = function test_digit(digit) {\n    return /^\\d$/.test(digit);\n  }; // Helper function which returns the absolute value of a given number\n\n\n  var abs = function abs(n) {\n    // if the function is called with no arguments then return\n    if (typeof n === 'undefined') return;\n    var x = new BigNumber(n, true);\n    x.sign = 1;\n    return x;\n  };\n\n  exports.n = function (number) {\n    return new BigNumber(number);\n  };\n\n  var errors = {\n    \"invalid\": \"Invalid Number\",\n    \"division by zero\": \"Invalid Number - Division By Zero\"\n  }; // constructor function which creates a new BigNumber object\n  // from an integer, a string, an array or other BigNumber object\n  // if new_copy is true, the function returns a new object instance\n\n  var BigNumber = function BigNumber(x, new_copy) {\n    var i;\n    this.number = [];\n    this.sign = 1;\n    this.rest = 0;\n\n    if (!x) {\n      this.number = [0];\n      return;\n    }\n\n    if (x.constructor === BigNumber) {\n      return new_copy ? new BigNumber(x.toString()) : x;\n    } // x can be an array or object\n    // eg array: [3,2,1], ['+',3,2,1], ['-',3,2,1]\n    // eg string: '321', '+321', -321'\n    // every character except the first must be a digit\n\n\n    if (typeof x == 'object') {\n      if (x.length && x[0] === '-' || x[0] === '+') {\n        this.sign = x[0] === '+' ? 1 : -1;\n        x.shift(0);\n      }\n\n      for (i = x.length - 1; i >= 0; --i) {\n        if (!this.add_digit(x[i], x)) return;\n      }\n    } else {\n      x = x.toString();\n\n      if (x.charAt(0) === '-' || x.charAt(0) === '+') {\n        this.sign = x.charAt(0) === '+' ? 1 : -1;\n        x = x.substring(1);\n      }\n\n      for (i = x.length - 1; i >= 0; --i) {\n        if (!this.add_digit(parseInt(x.charAt(i), 10), x)) {\n          return;\n        }\n      }\n    }\n  };\n\n  BigNumber.prototype.add_digit = function (digit, x) {\n    if (test_digit(digit)) this.number.push(digit);else {\n      //throw (x || digit) + \" is not a valid number\";\n      this.number = errors['invalid'];\n      return false;\n    }\n    return this;\n  }; // returns:\n  //      0 if this.number === n\n  //      -1 if this.number < n\n  //      1 if this.number > n\n\n\n  BigNumber.prototype._compare = function (n) {\n    // if the function is called with no arguments then return 0\n    if (typeof n === 'undefined') return 0;\n    var x = new BigNumber(n);\n    var i; // If the numbers have different signs, then the positive\n    // number is greater\n\n    if (this.sign !== x.sign) return this.sign; // Else, check the length\n\n    if (this.number.length > x.number.length) return this.sign;else if (this.number.length < x.number.length) return this.sign * -1; // If they have similar length, compare the numbers\n    // digit by digit\n\n    for (i = this.number.length - 1; i >= 0; --i) {\n      if (this.number[i] > x.number[i]) return this.sign;else if (this.number[i] < x.number[i]) return this.sign * -1;\n    }\n\n    return 0;\n  }; // greater than\n\n\n  BigNumber.prototype.gt = function (n) {\n    return this._compare(n) > 0;\n  }; // greater than or equal\n\n\n  BigNumber.prototype.gte = function (n) {\n    return this._compare(n) >= 0;\n  }; // this.number equals n\n\n\n  BigNumber.prototype.equals = function (n) {\n    return this._compare(n) === 0;\n  }; // less than or equal\n\n\n  BigNumber.prototype.lte = function (n) {\n    return this._compare(n) <= 0;\n  }; // less than\n\n\n  BigNumber.prototype.lt = function (n) {\n    return this._compare(n) < 0;\n  }; // this.number + n\n\n\n  BigNumber.prototype.add = function (n) {\n    // if the function is called with no arguments then return\n    if (typeof n === 'undefined') return this;\n    var x = new BigNumber(n);\n\n    if (this.sign !== x.sign) {\n      if (this.sign > 0) {\n        x.sign = 1;\n        return this.minus(x);\n      } else {\n        this.sign = 1;\n        return x.minus(this);\n      }\n    }\n\n    this.number = BigNumber._add(this, x);\n    return this;\n  }; // this.number - n\n\n\n  BigNumber.prototype.subtract = function (n) {\n    // if the function is called with no arguments then return\n    if (typeof n === 'undefined') return this;\n    var x = new BigNumber(n);\n\n    if (this.sign !== x.sign) {\n      this.number = BigNumber._add(this, x);\n      return this;\n    } // if current number is lesser than x, final result will be negative\n\n\n    this.sign = this.lt(x) ? -1 : 1;\n    this.number = abs(this).lt(abs(x)) ? BigNumber._subtract(x, this) : BigNumber._subtract(this, x);\n    return this;\n  }; // adds two positive BigNumbers\n\n\n  BigNumber._add = function (a, b) {\n    var i;\n    var remainder = 0;\n    var length = Math.max(a.number.length, b.number.length);\n\n    for (i = 0; i < length || remainder > 0; ++i) {\n      a.number[i] = (remainder += (a.number[i] || 0) + (b.number[i] || 0)) % 10;\n      remainder = Math.floor(remainder / 10);\n    }\n\n    return a.number;\n  }; // decreases b from a\n  // a and b are 2 positive BigNumbers and a > b\n\n\n  BigNumber._subtract = function (a, b) {\n    var i;\n    var remainder = 0;\n    var length = a.number.length;\n\n    for (i = 0; i < length; ++i) {\n      a.number[i] -= (b.number[i] || 0) + remainder;\n      a.number[i] += (remainder = a.number[i] < 0 ? 1 : 0) * 10;\n    } // let's optimize a bit, and count the zeroes which need to be removed\n\n\n    i = 0;\n    length = a.number.length - 1;\n\n    while (a.number[length - i] === 0 && length - i > 0) {\n      i++;\n    }\n\n    if (i > 0) a.number.splice(-i);\n    return a.number;\n  }; // this.number * n\n\n\n  BigNumber.prototype.multiply = function (n) {\n    // if the function is called with no arguments then return\n    if (typeof n === 'undefined') return this;\n    var x = new BigNumber(n);\n    var i;\n    var j;\n    var remainder = 0;\n    var result = []; // test if one of the numbers is zero\n\n    if (this.isZero() || x.isZero()) {\n      return new BigNumber(0);\n    }\n\n    this.sign *= x.sign; // multiply the numbers\n\n    for (i = 0; i < this.number.length; ++i) {\n      for (remainder = 0, j = 0; j < x.number.length || remainder > 0; ++j) {\n        result[i + j] = (remainder += (result[i + j] || 0) + this.number[i] * (x.number[j] || 0)) % 10;\n        remainder = Math.floor(remainder / 10);\n      }\n    }\n\n    this.number = result;\n    return this;\n  }; // this.number / n\n\n\n  BigNumber.prototype.divide = function (n) {\n    // if the function is called with no arguments then return\n    if (typeof n === 'undefined') {\n      return this;\n    }\n\n    var x = new BigNumber(n);\n    var i;\n    var j;\n    var length;\n    var remainder = 0;\n    var result = [];\n    var rest = new BigNumber(); // test if one of the numbers is zero\n\n    if (x.isZero()) {\n      this.number = errors['division by zero'];\n      return this;\n    } else if (this.isZero()) {\n      return new BigNumber(0);\n    }\n\n    this.sign *= x.sign;\n    x.sign = 1; // every number divided by 1 is the same number, so don't waste time dividing them\n\n    if (x.number.length === 1 && x.number[0] === 1) return this;\n\n    for (i = this.number.length - 1; i >= 0; i--) {\n      rest.multiply(10);\n      rest.number[0] = this.number[i];\n      result[i] = 0;\n\n      while (x.lte(rest)) {\n        result[i]++;\n        rest.subtract(x);\n      }\n    }\n\n    i = 0;\n    length = result.length - 1;\n\n    while (result[length - i] === 0 && length - i > 0) {\n      i++;\n    }\n\n    if (i > 0) result.splice(-i); // returns the rest as a string\n\n    this.rest = rest;\n    this.number = result;\n    return this;\n  }; // this.number % n\n\n\n  BigNumber.prototype.mod = function (n) {\n    return this.divide(n).rest;\n  }; // n must be a positive number\n\n\n  BigNumber.prototype.power = function (n) {\n    if (typeof n === 'undefined') return;\n    var num; // Convert the argument to a number\n\n    n = +n;\n    if (n === 0) return new BigNumber(1);\n    if (n === 1) return this;\n    num = new BigNumber(this, true);\n    this.number = [1];\n\n    while (n > 0) {\n      if (n % 2 === 1) {\n        this.multiply(num);\n        n--;\n        continue;\n      }\n\n      num.multiply(num);\n      n = Math.floor(n / 2);\n    }\n\n    return this;\n  }; // |this.number|\n\n\n  BigNumber.prototype.abs = function () {\n    this.sign = 1;\n    return this;\n  }; // is this.number == 0 ?\n\n\n  BigNumber.prototype.isZero = function () {\n    return this.number.length === 1 && this.number[0] === 0;\n  }; // this.number.toString()\n\n\n  BigNumber.prototype.toString = function () {\n    var i;\n    var x = '';\n    if (typeof this.number === \"string\") return this.number;\n\n    for (i = this.number.length - 1; i >= 0; --i) {\n      x += this.number[i];\n    }\n\n    return this.sign > 0 ? x : '-' + x;\n  }; // Use shorcuts for functions names\n\n\n  BigNumber.prototype.plus = BigNumber.prototype.add;\n  BigNumber.prototype.minus = BigNumber.prototype.subtract;\n  BigNumber.prototype.div = BigNumber.prototype.divide;\n  BigNumber.prototype.mult = BigNumber.prototype.multiply;\n  BigNumber.prototype.pow = BigNumber.prototype.power;\n  BigNumber.prototype.val = BigNumber.prototype.toString;\n})(this);","map":null,"metadata":{},"sourceType":"script"}