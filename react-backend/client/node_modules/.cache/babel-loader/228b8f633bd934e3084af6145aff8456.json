{"ast":null,"code":"'use strict';\n\nfunction isZero(array) {\n  for (var j = 0, len = array.length; j < len; j++) {\n    var byte = array[j];\n\n    if (byte !== 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getNextRemainder(array) {\n  var remainder = 0;\n\n  for (var i = array.length - 1; i >= 0; i--) {\n    var s = remainder * 256 + array[i];\n    array[i] = Math.floor(s / 10);\n    remainder = s % 10;\n  }\n\n  return remainder;\n}\n\nfunction invert(array) {\n  // Invert bits\n  var len = array.length;\n\n  for (var i = 0; i < len; i++) {\n    array[i] = array[i] ^ 0xFF;\n  }\n\n  for (var _i = 0; _i < len; _i++) {\n    array[_i] = array[_i] + 1;\n\n    if (array[_i] > 255) {\n      array[_i] = 0;\n    } else {\n      break;\n    }\n  }\n}\n\nmodule.exports.convertLEBytesToString = convertLEBytesToString;\n\nfunction convertLEBytesToString(buffer) {\n  var array = Array.prototype.slice.call(buffer, 0, buffer.length);\n\n  if (isZero(array)) {\n    return '0';\n  } else {\n    var sign = void 0;\n\n    if (array[array.length - 1] & 0x80) {\n      sign = '-';\n      invert(array);\n    } else {\n      sign = '';\n    }\n\n    var result = '';\n\n    while (!isZero(array)) {\n      var t = getNextRemainder(array);\n      result = t + result;\n    }\n\n    return sign + result;\n  }\n}\n\nmodule.exports.numberToInt64LE = numberToInt64LE;\n\nfunction numberToInt64LE(num) {\n  // adapted from https://github.com/broofa/node-int64\n  var negate = num < 0;\n  var hi = Math.abs(num);\n  var lo = hi % 0x100000000;\n  hi = hi / 0x100000000 | 0;\n  var buf = new Buffer(8).fill(0);\n\n  for (var i = 0; i <= 7; i++) {\n    buf[i] = lo & 0xff;\n    lo = i === 3 ? hi : lo >>> 8;\n  }\n\n  if (negate) {\n    var carry = 1;\n\n    for (var _i2 = 0; _i2 <= 7; _i2++) {\n      var v = (buf[_i2] ^ 0xff) + carry;\n      buf[_i2] = v & 0xff;\n      carry = v >> 8;\n    }\n  }\n\n  return buf;\n}","map":null,"metadata":{},"sourceType":"script"}